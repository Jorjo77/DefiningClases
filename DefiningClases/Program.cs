using System;

namespace DefiningClases
{
    class Program
    {
        //тук се прави вътрешен клас InnerClass - той може да се ползва само в програм класа и рядко се използва!
        static void Main(string[] args)
        {
            //ADT - Abstract Data Structure - Stack, Queue and Array are some ADT!
            //Classes provide structure for describing and creating objects. Names are PascalCasing.
            //В класа описваме общите свойства за обекта който ще пресъздаваме с код
            //класа можем да разглеждаме и като собствен тип данни
            //обекта може да е от реалния или програмиския свят.
            //всико което има в един клас е Member
            //Member can be: Filds, Properties, Methods, Constructor, Enumerator
            //Когато инициализираме променлива правим референция на Стака, а с ключовата думичка new заделяме място на Хийпа (Стака и Хийпа са в Рамта, Стака пази променливите в 16-тична бройна с-ма). Данните отивар в Хийпа, това което знае как да ги намери е на Стака. Класа и обекта са на Хийпа, а променливата е на Стака. В Стака е статичната памет (1ГБ в нповечето случаи), в Хийпа динамичната. Всеки метод си има собствен Стак в който си пази променливите.
            //HeapOverFlow = OutOfMemoryException няма такава концепция.
            //StackOverFlow - когато направим безкрайна рекурсия (без дъно)
            //методите на един клас често се наричат бихейвиър, а пропъртитата - дейта, обектите - инстанция.

            //след няколко месеца С# in depth - мастер класа Октомври 2019 ще ни е добре и ни го препоръчва безплатен е май)

            // Fields can be of any type. Fields should always be private. Когато данни са само за класа ги слафаме в поле (Fields), а когато са публични в пропърти.
            //когато сложим private пред променлива, пропърти или метод то може да се ползва само в класа (между къдравите скоби на класа!!!).

            //видове достъп: private - само в този клас, internal - само в този проект, protected - да се вижда само в класове които наследяват Class student, public - всеки който има достъп до този клас може да го види! всичките тези можем да ги сложим пред стринга. По дефолт е private.

            //пропъртитата са интърнъл или пъблик. Гет-ъра връща ст-стта, сетъра записва ст-стта (това са съкратени записи за методи). Едно пропърти без сетер е рид онли - не можем да му задаваме ст-ст.
            //практика в с# е да имаме прайвет поле и публик пропърти за едно и също нещо, като когато използвам пропъртито, то да използва вътрешното поле.
            //null reference exeption е грешка която дава ако се опитаме да извикаме нещо което е нула!

            //This сочи към текущия обект.

            //метода работи на всяка инстанция, не на класа. This показва за коя инстанция става дума. This може и да не ползваме все тая било с него и без него!?
            //this когато използваме в метод ни дава достъп до данните на точно тази инстанция. this сочи към конкретната инстанция (конкретния обект)

            //Конструктори:
            //когато конструктора е извикан, той прави нова инстанция на класа. Идеята му е да ни инициализира начални данни на полета и пропъртита и да извиква някакви първоначални методи. Конструктора е с името на класа, обикновенно е public и прилича на метод. Дава ни началния стейт на даден клас.
            //Конструктора винаги се пише преди прайвет полетата и след пропъртитата.
            //Ako не направим конструктор в даден клас C# автоматично ни прави празен конструктор който нищо не прави.(май не го виждаме) А направим ли  C#  ползва нашия.

            //Dog sharoDog = new Dog();
            //sharoDog.Name = "Sharo";
            //sharoDog.Years = 7;
            //Console.WriteLine(sharoDog.Name);
            //Dog peshooDog = new Dog();
            //peshooDog.Name = "Pesho";
            //peshooDog = sharoDog;
            //Console.WriteLine(peshooDog.Name);
            //Console.WriteLine(peshooDog.Years);
            Student student = new Student();
            student.name = "Pesho";
            Console.WriteLine(student.name);
        }
    }
}
