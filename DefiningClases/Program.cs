using System;

namespace DefiningClases
{
    class Program
    {
        //тук се прави вътрешен клас InnerClass - той може да се ползва само в програм класа и рядко се използва!
        static void Main(string[] args)
        {
            //ADT - Abstract Data Structure - Stack, Queue and Array are some ADT!
            //Classes provide structure for describing and creating objects. Names are PascalCasing.
            //В класа описваме общите свойства за обекта който ще пресъздаваме с код
            //класа можем да разглеждаме и като собствен тип данни
            //обекта може да е от реалния или програмиския свят.
            //всико което има в един клас е Member
            //Member can be: Filds, Properties, Methods, Constructor, Enumerator
            //Когато инициализираме променлива правим референция на Стака, а с ключовата думичка new заделяме място на Хийпа (Стака и Хийпа са в Рамта, Стака пази променливите в 16-тична бройна с-ма). Данните отивар в Хийпа, това което знае как да ги намери е на Стака. Класа и обекта са на Хийпа, а променливата е на Стака. В Стака е статичната памет (1ГБ в повечето случаи), в Хийпа динамичната. Всеки метод си има собствен Стак в който си пази променливите.
            //HeapOverFlow = OutOfMemoryException няма такава концепция.
            //StackOverFlow - когато направим безкрайна рекурсия (без дъно)
            //методите на един клас често се наричат бихейвиър, а пропъртитата - дейта, обектите - инстанция.

            //след няколко месеца С# in depth - мастер класа Октомври 2019 ще ни е добре и ни го препоръчва безплатен е май)

            // Fields can be of any type. Fields should always be private. Когато данни са само за класа ги слагаме в поле (Field), а когато са публични в пропърти.
            //когато сложим private пред променлива, пропърти или метод то може да се ползва само в класа (между къдравите скоби на класа!!!).

            //видове достъп: private - само в този клас, internal - само в този проект, protected - да се вижда само в класове които наследяват класа (Class student например), public - всеки който има достъп до този клас може да го види! всичките тези можем да ги сложим пред стринга. По дефолт е private.

            //пропъртитата са интърнъл или пъблик. Гет-ъра връща ст-стта, сетъра записва ст-стта (това са съкратени записи за методи). Едно пропърти без сетер е рид онли - не можем да му задаваме ст-ст.
            //практика в C# е да имаме прайвет поле и публик пропърти за едно и също нещо, като когато използвам пропъртито, то да използва вътрешното поле.
            //null reference exeption е грешка която дава ако се опитаме да извикаме нещо което е нула!

            //This сочи към текущия обект.

            //метода работи на всяка инстанция, не на класа. This показва за коя инстанция става дума. This може и да не ползваме все тая било с него и без него!?
            //this когато използваме в метод ни дава достъп до данните на точно тази инстанция. this сочи към конкретната инстанция (конкретния обект)

            //Конструктори:
            //когато конструктора е извикан, той прави нова инстанция на класа. Идеята му е да ни инициализира начални данни на полета и пропъртита и да извиква някакви първоначални методи. Конструктора е с името на класа, обикновенно е public и прилича на метод. Дава ни началния стейт на даден клас.
            //Конструктора винаги се пише преди прайвет полетата и преди пропъртитата.
            //Ako не направим конструктор в даден клас C# автоматично ни прави празен конструктор който нищо не прави.(май не го виждаме) А направим ли  C#  ползва нашия.
            // и при конструкторите има оверлодинг, т.е. можем да правим различни конструктори с различни сигнатури които да извиквам при нужда.
            //друго важно нещо е че можем да chein - ваме (свързваме вув верига) конструктори.
            //не може да имаме два конструктора с еднаква сигнатура!

            //Enumerations/Енумератори-
            //Това е тип данни е доста удобен и се използва често когато имаме тип на нещо - за изброяване на всички възможни стойности на даден тип.  EnumerationsDemo - може да е пропърти или поле на клас, аргумент в метод. Енумерациите всъшност са числа (отдолу C# така го прави). Ako искаме броенето да не почва от нула, можем да му зададем от колко! Винаги увеличава следващото с едно спрямо предишното.

            //Статични класове и статични клас мембъри
            //Всеки клас става статичен с ключова думичка static отпред. Не може да му се правят инстанции, не могат да се правят променливи от неговия тип и може да му се достъпват неговите пропъртита и полета спрямо името му. StaticClasses е демото!!!
            //Много често неща които са общи и ще се използват често се именуват с Helper накрая.
            //Статичен означава искам само една инстанция на това, искам никой да не може да инстанцира повече това и само да се ползва от едно и също място. Т.е. за да използвам  BankHelper - a трябва да използвам директно класа! В много случаи помага, но в много случаи не е добре (не трябва да се прекалява с него), например: не може да се тества, води до сайд дефекти и др. 
            //тук this няма!
            //класа Math е добър пример за статичен клас!!!
            //Всеки клас, независимо дали е статичен или не може да има статични мембъри. Статичния мембър се вика директно на класа, дори когато има инстанция.
            //Ако направим constand feeld той ВИНАГИ е статичен!!!

            //static members: methods, fields, properties
            //Статичните методи може да се оверлоднат!

            //Namespaces - използват се за да организираме класове, using е ключова дума, която ни позволява да не им пишем имената - BMVManufacturer демото!!!

            //Статичните методи и пропъртита се викат на целия клас, а нестатичните на инстанцията!!!
            //дефолтни (константни) неща, например формула се слагат на статични методи.
            //Console е статичен клас!

            //Съвет от Даков - в изпитателен срок давайте абсолютно всичко от себе си, много е важно (тогава ви наблюдават под лупа), мине ли изп. срок вече може както ни е кеф, много рядко се уволняват програмисти извън изпитатекен срок!!!! По скоро ще ви предложат 3-4 заплати да напуснете отколкото да ви уволнят (особено чужди европейски фирми)!!!
            //Мнение за Фрилансерите!!! - Според него бачкат много повече за по - малко пари, когато е работил Фриланс му е излизало през носа раб. 20 пъти повее за 20 пъти по-малко пари!!! МНого се научава, по-добър ставаш, ама........Той тези хора които са изцяло Фрилансери не ги разбира. Сега с короната всички сме като фрилансери, работим хоум, но в корпорациите не е нужно да си даваш толкова зор, т.е. там си с екип, не всичко зависи от теб. Важно е да има кой да те спаси при нужда.
            //Ако от 8ч. работен ден направиш 6 ч. писане на код си машина!!!
            //Koгато прекаляваш с програмиране може да се окажеш в ситуация да не можеш да се изключиш да си починеш, което става вредно и се отразява на здравето. Масвио 4-5  часа на ден се програмира и това е нормално и шефовете го разбират.
            //C#, JS, HTML and CSS са ни напълно достатъчни за да започнем кариера.. От там език друг ако се налага се учи за 1 седмица. Да учим финдаментални неща - алгуритми, бази данни, компютър саянс... 
            //React e нещо много добро, много се ползва и е добре да го знаем! След структури от данни и пътеката е добра идея.
            //Кан Академия била много добра за математика

            //SendBoxProject - за тестване на някои неща как се държат. В програмирането често се налага някакви малки пърчета код да видим как работят.

            //ако в конструктора имаме 2 променливи с еднакви имена, напървата пишем this и оправяме проблема
            

            //Dog sharoDog = new Dog();
            //sharoDog.Name = "Sharo";
            //sharoDog.Years = 7;
            //Console.WriteLine(sharoDog.Name);
            //Dog peshooDog = new Dog();
            //peshooDog.Name = "Pesho";
            //peshooDog = sharoDog;
            //Console.WriteLine(peshooDog.Name);
            //Console.WriteLine(peshooDog.Years);
            Student student = new Student();
            student.name = "Pesho";
            Console.WriteLine(student.name);
        }
    }
}
